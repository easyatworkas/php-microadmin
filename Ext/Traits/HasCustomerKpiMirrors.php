<?php

/*
 * [ ] Refactor
 * [ ] Reformat
 * [ ] Complete
 */

namespace Ext\Traits;

use Ext\Models\Customer;
use Ext\Models\CustomerKpiMirror;

trait HasCustomerKpiMirrors
{
    public function kpiMirrorTargets(): array
    {
        if (!$this->hasProduct('Key Performance Indicators')) return [];

        return static::newQuery($this->getFullPath() . '/kpi_mirrors/to')
            ->setModel(CustomerKpiMirror::class)
            ->autogenerated(false)
            ->getAll()
            ->all();
    }

    public function kpiMirrorSources(): array
    {
        if (!$this->hasProduct('Key Performance Indicators')) return [];

        return static::newQuery($this->getFullPath() . '/kpi_mirrors/from')
            ->setModel(CustomerKpiMirror::class)
            ->autogenerated(false)
            ->getAll()
            ->all();
    }

    public function kpiMirrors(): array
    {
        return array_merge($this->kpiMirrorSources(), $this->kpiMirrorTargets());
    }

    public function hasKpiMirror(array $parameters): ?CustomerKpiMirror
    {
        foreach ($this->kpiMirrors() as $kpiMirror)
        {
            if ($kpiMirror->matches($parameters))
            {
                return $kpiMirror;
            }
        }
        return null;
    }

    public function mirrorKpiTo(int $target_id, ?int $parent_id = null): ?CustomerKpiMirror
    {
        if (!$this->hasProduct('Key Performance Indicators')) return null;

        if (!$this->hasKpiMirror(['mirror_id' => $target_id]))
        {
            // Create new KpiMirror
            $newMirror = CustomerKpiMirror::newInstance(array_filter([
                'source' => $this->id,
                'target' => $target_id,
                'parent' => $parent_id
            ], function ($value) {
                return !is_null($value);
            }))->setPath("/customers/$this->id/kpi_mirrors");

            $newMirror->save();
            return $newMirror;
        }
        return null;
    }

    public function mirrorKpiFrom(int $source_id, ?int $parent_id = null): ?CustomerKpiMirror
    {
        if (!$this->hasProduct('Key Performance Indicators')) return null;

        if (!$this->hasKpiMirror(['original_id' => $source_id]))
        {
            // Create new KpiMirror
            $newMirror = CustomerKpiMirror::newInstance(array_filter([
                'source' => $source_id,
                'target' => $this->id,
                'parent_id' => $parent_id
            ], function ($value) {
                return !is_null($value);
            }))->setPath("/customers/$this->id/kpi_mirrors");

            $newMirror->save();
            return $newMirror;
        }
        return null;
    }

    public function mirrorKpisFrom(array $source_ids): bool
    {
        if (!$this->hasProduct('Key Performance Indicators')) return false;

        $previous = null;
        foreach ($source_ids as $source_id)
        {
            $previous = $this->mirrorKpiFrom($source_id, $previous)->id;
        }
        return true;
    }
}